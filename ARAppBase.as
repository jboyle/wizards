package {		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.PixelSnapping;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.IOErrorEvent;	import flash.events.SecurityErrorEvent;	import flash.media.Camera;	import flash.media.Video;	import flash.net.URLLoader;	import flash.net.URLLoaderDataFormat;	import flash.net.URLRequest;		import org.libspark.flartoolkit.core.FLARCode;	import org.libspark.flartoolkit.core.param.FLARParam;	import org.libspark.flartoolkit.core.raster.rgb.FLARRgbRaster_BitmapData;	import org.libspark.flartoolkit.detector.FLARMultiMarkerDetector;	import org.libspark.flartoolkit.detector.FLARSingleMarkerDetector;		[Event(name="init",type="flash.events.Event")]	[Event(name="init",type="flash.events.Event")]	[Event(name="ioError",type="flash.events.IOErrorEvent")]	[Event(name="securityError",type="flash.events.SecurityErrorEvent")]	public class ARAppBase extends Sprite {				private var _loader:URLLoader;		private var _loaderArray:Array;		// array of URLLoaders		private var _cameraFile:String;		private var _codeFile:String;		private var _codeFileArray:Array;	// array of strings		private var _width:int;		private var _height:int;		private var _codeWidth:int;		private var _codeWidthArray:Array;				protected var _param:FLARParam;		protected var _code:FLARCode;		protected var _codeArray:Array;	// array of FLARCode		protected var _raster:FLARRgbRaster_BitmapData;		protected var _detector:FLARSingleMarkerDetector;		protected var _detectorMulti:FLARMultiMarkerDetector;				private var _markerWidth:int = 16;			private var _markerHeight:int = 16; 		//private var _markerPercentWidth:uint = 80; 		//private var _markerPercentHeight:uint = 80;		public static var _markerPercentWidth:uint = 80; 		public static var _markerPercentHeight:uint = 80;				protected var _webcam:Camera;		protected var _video:Video;		protected var _capture:Bitmap;				public function ARAppBase() {		}				/*public static function get markerPercentWidth():uint		{			return _markerPercentWidth;		}		public static function get markerPercentHeight():uint		{			return _markerPercentHeight;		}*/				protected function init(cameraFile:String, codeFile:String, canvasWidth:int = 400, canvasHeight:int = 300, codeWidth:int = 60):void		{			_cameraFile = cameraFile;			_width = canvasWidth;			_height = canvasHeight;			_codeFile = codeFile;	_codeFileArray = null;			_codeWidth = codeWidth;	_codeWidthArray = null;						_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.BINARY;			_loader.addEventListener(Event.COMPLETE, _onLoadParam);			_loader.addEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);			_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);			_loader.load(new URLRequest(_cameraFile));		}				protected function initM(cameraFile:String, codeFileArray:Array, canvasWidth:int=400, canvasHeight:int=300, codeWidth:int=60):void		{			_cameraFile = cameraFile;			_width = canvasWidth;			_height = canvasHeight;			_codeFileArray = codeFileArray;			_codeWidthArray = new Array();			for(var i:int=0; i<codeFileArray.length; i++)				_codeWidthArray.push(codeWidth);	// all markers are the same size!!!						_loader = new URLLoader();			_loader.dataFormat = URLLoaderDataFormat.BINARY;			_loader.addEventListener(Event.COMPLETE, _onLoadParam);			_loader.addEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);			_loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);			_loader.load(new URLRequest(_cameraFile));		}				// this function is called only one time		private function _onLoadParam(e:Event):void {			_loader.removeEventListener(Event.COMPLETE, _onLoadParam);			_loader.removeEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);			_loader.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);			// _loader = null;						_param = new FLARParam();	//translation			_param.loadARParam(_loader.data);			_param.changeScreenSize(_width, _height);						_loaderArray = new Array();			if(!_codeFileArray)	// using only one loader			{				_loaderArray[0] = new URLLoader();				_loaderArray[0].dataFormat = URLLoaderDataFormat.TEXT;				_loaderArray[0].addEventListener(Event.COMPLETE, _onLoadCode);				_loaderArray[0].addEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);				_loaderArray[0].addEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);				_loaderArray[0].load(new URLRequest(_codeFile));			}			else			{				_codeArray = new Array();				for(var i:int=0; i<_codeFileArray.length;i++)				{					_loaderArray[i] = new URLLoader();					_loaderArray[i].dataFormat = URLLoaderDataFormat.TEXT;					_loaderArray[i].addEventListener(Event.COMPLETE, _onLoadCode);					_loaderArray[i].addEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);					_loaderArray[i].addEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);					_loaderArray[i].load(new URLRequest(_codeFileArray[i]));	// begin loading all ARMarkers				}			}		}				private function _onLoadCode(e:Event):void {			if(!_codeFileArray)		// single marker			{				_code = new FLARCode(_markerWidth, _markerHeight, _markerPercentWidth, _markerPercentHeight);	// 32,32 or 64,64				_code.loadARPatt(_loaderArray[0].data);				_loaderArray[0].removeEventListener(Event.COMPLETE, _onLoadCode);				_loaderArray[0].removeEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);				_loaderArray[0].removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);			}			else	// reading multiple ARMarkers			{				for(var i:int=0; i<_loaderArray.length; i++)				{					if(_loaderArray[i].bytesLoaded==_loaderArray[i].bytesTotal && _codeArray[i]==null)					{						var _codeTemp:FLARCode = new FLARCode(_markerWidth, _markerHeight, _markerPercentWidth, _markerPercentHeight);						_codeTemp.loadARPatt(_loaderArray[i].data);						//test						//_codeArray.push(_codeTemp);						_codeArray[i] = _codeTemp;						_loaderArray[i].removeEventListener(Event.COMPLETE, _onLoadCode);						_loaderArray[i].removeEventListener(IOErrorEvent.IO_ERROR, dispatchEvent);						_loaderArray[i].removeEventListener(SecurityErrorEvent.SECURITY_ERROR, dispatchEvent);						break;					}				}				}						// setup webcam			if(!_codeFileArray || _codeArray.length==_codeFileArray.length)			{				// _loaderArray = null;				_webcam = Camera.getCamera();				if (!_webcam) {					throw new Error('No webcam!!!!');				}				_webcam.setMode(_width, _height, 30);//, true);				_video = new Video(_width, _height);				_video.attachCamera(_webcam);				_capture = new Bitmap(new BitmapData(_width, _height, false, 0), PixelSnapping.AUTO, true);									// setup ARToolkit				_raster = new FLARRgbRaster_BitmapData(_capture.bitmapData);								// single detection setup				//_detector = new FLARSingleMarkerDetector(_param, _code, _codeWidth);	// _codeWidth:physical size of a marker (mm)				//_detector.setContinueMode(true);	// arGetTransMatCont <- using previous image frame in tracking								// multi detection setup				_detectorMulti = new FLARMultiMarkerDetector(_param, _codeArray, _codeWidthArray, int(_codeArray.length));				_detectorMulti.setContinueMode(true);								dispatchEvent(new Event(Event.INIT));			}		}				protected function onInit():void {		}	}}