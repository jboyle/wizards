package {	// test	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;		import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;	import org.libspark.flartoolkit.detector.FLARMultiMarkerDetectorResult;	import org.libspark.flartoolkit.support.pv3d.FLARBaseNode;	import org.libspark.flartoolkit.support.pv3d.FLARCamera3D;	import org.papervision3d.render.LazyRenderEngine;	import org.papervision3d.scenes.Scene3D;	import org.papervision3d.view.Viewport3D;		public class PV3DARApp extends ARAppBase {			protected var _base:Sprite;		public static var globalBase:Sprite;				public static var globalBitmap:Bitmap;		public static var globalBitmapData:BitmapData;				public static var gIsFirstDetectionDone:Boolean;		public static var _detectedMarkers:Array;	// array of FLARDetectedMarkerInfo		public static var _detectedNumFinal:int;				protected var _viewport:Viewport3D;		protected var _camera3d:FLARCamera3D;		protected var _scene:Scene3D;		protected var _renderer:LazyRenderEngine;		protected var _markerNode:FLARBaseNode;			protected var _markerNodeMulti:Array;	// array of FLARBaseNode		protected var _detectedInfo:Array;		// array of FLARMultiMarkerDetectorResult		protected var detected:Boolean;		protected var detectedNum:int;		protected var _maxMarkerNum:int;		//protected var _detectedResults:FLARMultiMarkerDetectorResult;				/*public function get detectedNumFinal():int		{			return _detectedNumFinal;		}*/				protected var _resultMat:FLARTransMatResult = new FLARTransMatResult();				public function PV3DARApp() {		}				protected override function init(cameraFile:String, codeFile:String, canvasWidth:int = 320, canvasHeight:int = 240, codeWidth:int = 60):void {			_markerNodeMulti = null;			addEventListener(Event.INIT, _onInit, false, int.MAX_VALUE);			super.init(cameraFile, codeFile, canvasWidth, canvasHeight, codeWidth);		}				protected override function initM(cameraFile:String, codeFileArray:Array, canvasWidth:int = 320, canvasHeight:int = 240, codeWidth:int = 60):void {			_maxMarkerNum=20;	// max 20 markers			_markerNodeMulti = new Array();			//for(var i:int=0; i<_maxMarkerNum; i++)	// max 20 markers			//	_markerNodeMulti.push(_markerNode);			_detectedNumFinal = 0;	// # of finally detected markers						addEventListener(Event.INIT, _onInit, false, int.MAX_VALUE);			super.initM(cameraFile, codeFileArray, canvasWidth, canvasHeight, codeWidth);		}				private function _onInit(e:Event):void {			//trace("PV3DARApp.as _onInit() called");			_base = addChild(new Sprite()) as Sprite;			//test			globalBase = _base;						_capture.width = 800;//640;			_capture.height = 600;//480;			_base.addChild(_capture);						detected = false;	// protected var detected:Boolean;			detectedNum = -1;						// what's Viewport3D() ??????			_viewport = _base.addChild(new Viewport3D(320, 240)) as Viewport3D;			_viewport.scaleX = 800/320;//640 / 320;	// sub-sampling?			_viewport.scaleY = 600/240;//480 / 240;			_viewport.x = -4; // 4pix ???						_camera3d = new FLARCamera3D(_param);						_scene = new Scene3D();			if(!_markerNodeMulti)				_markerNode = _scene.addChild(new FLARBaseNode()) as FLARBaseNode;			else				for(var i:int=0; i<_maxMarkerNum; i++)					_markerNodeMulti[i] = _scene.addChild(new FLARBaseNode()) as FLARBaseNode;														_renderer = new LazyRenderEngine(_scene, _camera3d, _viewport);						// test			/////////////////////////////////////////////////////////////			globalBitmapData = new BitmapData(320, 240, false, 0x00);			globalBitmap = new Bitmap(globalBitmapData);			globalBitmap.name = "tempbitmap";			_base.addChild(globalBitmap);			gIsFirstDetectionDone = false;			_detectedMarkers = new Array();			/////////////////////////////////////////////////////////////						addEventListener(Event.ENTER_FRAME, _onEnterFrame);		}				private function _onEnterFrame(e:Event = null):void {			_capture.bitmapData.draw(_video);								try {				//detected = _detector.detectMarkerLite(_raster, 70) && _detector.getConfidence() > 0.5;				//detectedNum = _detectorMulti.detectMarkerLite(_raster, 70);// && _detectorMulti.getConfidence()>0.5;	//70:threshold				detectedNum = _detectorMulti.detectMarkerLite(_raster, -1);				//detected = _detector.detectMarker(_raster, 80) && _detector.getConfidence()>0.5;							} catch (e:Error) {}						// test			//////////////////////////////////////////////////////////////////			var tmp:DisplayObject;			tmp = globalBase.removeChildAt(globalBase.getChildIndex(globalBase.getChildByName("tempbitmap")));			tmp = null;	// free ?			globalBitmapData = _detectorMulti.thresholdedBitmapData.clone();			//FLARRaster_BitmapData(this._bin_raster).bitmapData.clone();			for(var n:int=0; n<3; n++)		// now, testing with 3 ARmarkers			{				var t_patArray:Array = _codeArray[n].getPat();				for (var y:int=0; y<16; y++)					for(var x:int=0; x<16; x++)					{						var color:uint = uint(t_patArray[0][y][x][0]<<16 | t_patArray[0][y][x][1]<<8 | t_patArray[0][y][x][2]);						globalBitmapData.fillRect(new Rectangle(x*4+256, y*4+(n*65), 4, 4), color);					}			}			////////////////////////////////////////////////////////////////////////						/*for(i=0; i<_detectedNumFinal; i++)					_markerNodeMulti[i].visible = false;*/			_detectedNumFinal=0;			//for(i=0; i<_maxMarkerNum; i++)	_markerNodeMulti[i].visible=false;						if(detectedNum>0)			{				//protected var _markerNodeMulti:Array;		// array of FLARBaseNode				//protected var _detectedInfo:Array;		// array of FLARMultiMarkerDetectorResult				var i:int;				//var tempFLARBaseNode:FLARBaseNode;				//for(i=0; i<_markerNodeMulti.length;  i++)	_markerNodeMulti.pop();	// faster way ??				//trace("_detectedNumFinal: "+_detectedNumFinal);								for(i=0; i<detectedNum; i++)				{					if(_detectorMulti.getConfidence(i) > 0.6)					{						gIsFirstDetectionDone = true;												//var _markerNum:int;						//_markerNum = _detectorMulti.getARCodeIndex(i);						_detectorMulti.getTransmationMatrix(i, _resultMat);								//_markerNodeMulti[_markerNum].setTransformMatrix(_resultMat);						//_markerNodeMulti[_markerNum].visible = true;						//trace("AR code index: "+ _markerNum);												var temp:FLARMultiMarkerDetectorResult = _detectorMulti.getResult(i);						var tempResult:FLARDetectedMarkerInfo = new FLARDetectedMarkerInfo(temp.codeId,																							temp.direction,																							temp.confidence,																							temp.square,																							_resultMat);						_detectedMarkers[_detectedNumFinal] = tempResult;						_detectedNumFinal++;							// test						///////////////////////////////////////////////////////////						t_patArray = _detectorMulti._patt.getPatArray();						for (y=0; y<16; y++)							for(x=0; x<16; x++)							{								color = uint(t_patArray[y][x][0]<<16 | t_patArray[y][x][1]<<8 | t_patArray[y][x][2]);								globalBitmapData.fillRect(new Rectangle(x*4, y*4, 4, 4), color);							}							var xx:int; var yy:int;							for(var ii:int=0; ii<4; ii++)							{								xx=_detectorMulti.getResult(i).square.imvertex[ii].x-2;								yy=_detectorMulti.getResult(i).square.imvertex[ii].y-2;								globalBitmapData.fillRect(new Rectangle(xx, yy, 5, 5), 0xff0000);							}						///////////////////////////////////////////////////////////					}					//trace("Total ARMarkers: "+_detectedNumFinal);				}			}							// erasing previous objests			for(i=0; i<_maxMarkerNum; i++)	_markerNodeMulti[i].visible=false;						for(i=0; i<_detectedNumFinal; i++)			{				//trace(_detectedMarkers[i].codeId);				_markerNodeMulti[_detectedMarkers[i].codeId].setTransformMatrix(_detectedMarkers[i].transMat);				_markerNodeMulti[_detectedMarkers[i].codeId].visible = true;			}					// test			/////////////////////////////////////////////////////////			globalBitmap = new Bitmap(globalBitmapData);			globalBitmap.name = "tempbitmap";			globalBase.addChild(globalBitmap);			/////////////////////////////////////////////////////////						// single marker//			if (detected) {//				_detector.getTransformMatrix(_resultMat);//				_markerNode.setTransformMatrix(_resultMat);	// ???????????????????????????????//				//_markerNode.setTransformMatrixDummy(_resultMat);//				_resultMat.getRotationAngle();	// for Z axis//				_resultMat.getIntersectionPoints2();//				trace(_resultMat.intersectionX+" "+_resultMat.intersectionY+"\n");////				//using papervision3d api//				/*var baseRotation:Number3D = Matrix3D.matrix2euler(_markerNode.transform);//				trace("from papervision3D api");//				trace(baseRotation.x+" "+baseRotation.y+" "+baseRotation.z);*///				//				_markerNode.visible = true;//			} else {//				_markerNode.visible = false;//			}						_renderer.render();		}				public function set mirror(value:Boolean):void {			if (value) {				_base.scaleX = -1;				_base.x = 800;//640;			} else {				_base.scaleX = 1;				_base.x = 0;			}		}				public function get mirror():Boolean {			return _base.scaleX < 0;		}	}}