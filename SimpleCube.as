package {		import flash.events.Event;	import flash.events.MouseEvent;		import org.libspark.flartoolkit.core.transmat.FLARTransMatResult;	import org.libspark.flartoolkit.support.pv3d.FLARBaseNode;	import org.papervision3d.lights.PointLight3D;	import org.papervision3d.materials.WireframeMaterial;	import org.papervision3d.materials.shadematerials.FlatShadeMaterial;	import org.papervision3d.materials.utils.MaterialsList;	import org.papervision3d.objects.primitives.Cube;	import org.papervision3d.objects.primitives.Plane;		[SWF(width=800, height=600, backgroundColor=0x808080, frameRate=30)]		public class SimpleCube extends PV3DARApp {				private var _plane:Plane;		private var _cube:Cube;		private var _simpleGame:SimpleGame;		private var _prevDetectedMarkerIndex:Array;		private var _ObjectsToDisplay:Array;	// array of FLARBaseNode				public function SimpleCube() {			// Initalize application with the path of camera calibration file and patter definition file.			// カメラ補正ファイルとパターン定義ファイルのファイル名を渡して初期化。			addEventListener(Event.INIT, _onInit);			//init('Data/camera_para.dat', 'Data/flarlogo.pat');	// 50%						// multi marker detection			//var codeList:Array = new Array("Data/marker_fireelement_16_50.pat", "Data/marker_fire_16_50.pat", "Data/marker_defense_16_50.pat");			var codeList:Array = new Array("Data/marker1_16_50.pat", "Data/marker2_16_50.pat", "Data/marker3_16_50.pat");			//var codeList:Array = new Array("Data/marker1_32_50.pat", "Data/marker2_32_50.pat", "Data/marker3_32_50.pat");			//var codeList:Array = new Array("Data/marker1_16_60.pat", "Data/marker2_16_60.pat", "Data/marker3_16_60.pat");			initM('Data/camera_para.dat', codeList);		}		private function _onInit(e:Event):void {			//trace("SimpleCube.as _onInit() called")			var i:int;			mirror = !mirror;			// Create Plane with same size of the marker.			// マーカーと同じサイズを Plane を作ってみる。			if(this._maxMarkerNum==0)	// init for single marker detection mode			{				var wmat:WireframeMaterial = new WireframeMaterial(0xffff00, 1, 2); // with wireframe. / ワイヤーフレームで。				_plane = new Plane(wmat, 60, 60); // 80mm x 80mm。				_plane.rotationX = 180;				_markerNode.addChild(_plane); // attach to _markerNode to follow the marker. / _markerNode に addChild するとマーカーに追従する。								// Place the light at upper front.				// ライトの設定。手前、上のほう。				var light:PointLight3D = new PointLight3D();				light.x = 0;				light.y = 1000;				light.z = -1000;								// Create Cube.				// Cube を作る。				var fmat:FlatShadeMaterial = new FlatShadeMaterial(light, 0xff22aa, 0x75104e); // Color is pink. / ピンク色。				_cube = new Cube(new MaterialsList({all: fmat}), 30, 30, 30); // 40mm x 40mm x 40mm				_cube.z = 15; // Move the cube to upper (minus Z) direction Half height of the Cube. / 立方体の高さの半分、上方向(-Z方向)に移動させるとちょうどマーカーにのっかる形になる。				_markerNode.addChild(_cube);			}			else	// init for multiple marker detection mode				{				_prevDetectedMarkerIndex = new Array(); 				_ObjectsToDisplay = new Array();				var tempObj:FLARBaseNode;				//var wmat:WireframeMaterial;				light = new PointLight3D();				light.x=0; light.y=1000; light.z=-1000;				var color:Number=0x00ffff;									for(i=0; i<this._maxMarkerNum; i++)				{					tempObj = new FLARBaseNode();										color = int(Math.random()*255)<<16 | int(Math.random()*255)<<8 | int(Math.random()*255); 										wmat = new WireframeMaterial(color, 1, 2);					_plane = new Plane(wmat, 60, 60);					_plane.rotationX = 180;					fmat = new FlatShadeMaterial(light, color, 0x75104e);					_cube = new Cube(new MaterialsList({all: fmat}), 30, 30, 30);					_cube.z = 15;										tempObj.addChild(_plane);					tempObj.addChild(_cube);										_ObjectsToDisplay.push(tempObj);				}			}										_simpleGame = new SimpleGame();			_base.addChild(_simpleGame);	// important!!						stage.addEventListener(MouseEvent.CLICK, _onClick);			addEventListener(Event.ENTER_FRAME, _onEnterFrame);		}				private function _onClick(e:MouseEvent):void {			mirror = !mirror;		}				private function _onEnterFrame(e:Event = null):void		{			// displaying multiple multiple markers			//this._markerNode.visible = false;			var index:int;			var mat:FLARTransMatResult;						for(var i:int=0; i<_prevDetectedMarkerIndex.length; i++)			{				//index = _prevDetectedMarkerIndex.pop();				index = _prevDetectedMarkerIndex[i];				this._markerNode.removeChild(_ObjectsToDisplay[index]);			}				for(i=0; i<PV3DARApp._detectedNumFinal.length; i++)			{				index = PV3DARApp._detectedMarkers[i].codeId;				//trace("Marker ID: "+index);				// index = PV3DARApp._detectedNumFinal.push();				mat = PV3DARApp._detectedMarkers[i].transMat;				//trace("transMat: "+mat);				_ObjectsToDisplay[index].setTransformMatrix(mat);				this._markerNode.addChild(_ObjectsToDisplay[index]);			}			_prevDetectedMarkerIndex = PV3DARApp._detectedNumFinal;			this._markerNode.visible = true;			if(PV3DARApp._detectedNumFinal.length)			{				mat = PV3DARApp._detectedMarkers[0].transMat;				mat.getIntersectionPoints2();				_simpleGame.updateGame(mat.intersectionX, mat.intersectionY, mat.rotationZDegree, this.detected);			}		}	}}