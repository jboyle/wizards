package com.wizards{	import flash.events.Event;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;		public class WSound	{		static public var FADE_STOP:uint = 0;		static public var FADE_IN:uint = 1;		static public var FADE_OUT:uint = 2;						private var sound:Sound;		private var channel:SoundChannel;		private var transform:SoundTransform;		private var loop:Boolean;		private var _playing:Boolean;		private var _loaded:Boolean;				private var _fadeState:uint;		private var _fadeTime:Number;		private var _fadeTimer:Number;		private var _volume:Number;				public function WSound(sound:Sound, loop = false)		{			this.sound = sound;			this.channel = null;			this.transform = new SoundTransform();			this.loop = false;			this._playing = false;			this._loaded = false;			this._volume = 1;						this.sound.addEventListener(Event.COMPLETE,handleLoadComplete);		}				public function play(){			if(channel != null){				stop();			}			_playing = true;			if(loaded){					channel = sound.play();				this.transform = channel.soundTransform;				channel.addEventListener(Event.SOUND_COMPLETE,handleSoundComplete);			}		}				public function stop(){			trace("stopping sound");			if(channel != null){				channel.removeEventListener(Event.SOUND_COMPLETE,handleSoundComplete);				channel.stop();			}			_playing = false;		}				private function handleLoadComplete(ev:Event){			_loaded = true;			if(_playing){				play();			}		}		private function handleSoundComplete(ev:Event){			channel.removeEventListener(Event.SOUND_COMPLETE, handleSoundComplete);			if(loop){				play();			} else {				channel = null;				_playing = false;			}		}				public function update(){			if(_playing && _fadeState != FADE_STOP){				_fadeTimer += WizardsG.TIME_DIFF;				var u:Number = _fadeTimer / _fadeTime;				if(u > 1){					if(_fadeState == FADE_IN){						transform.volume = 1;					} else {						transform.volume = 0;						stop();					}					_fadeState = FADE_STOP;				} else {					if(_fadeState == FADE_IN){						transform.volume = u;					} else {						transform.volume = 1-u;					}				}			} else {				transform.volume = _volume;			}						if(channel != null){				channel.soundTransform = transform;			}		}				public function fadeIn(time:Number){			if(!_playing){				play();			}			transform.volume = 0;			_fadeState = FADE_IN;			_fadeTime = time;			_fadeTimer = 0;		}				public function fadeOut(time:Number){			transform.volume = 1;			_fadeState = FADE_OUT;			_fadeTime = time;			_fadeTimer = 0;		}				public function get loaded():Boolean{			return _loaded;		}				public function get looped():Boolean{			return loop;		}				public function set looped(nl:Boolean):void{			loop = nl;		}				public function get playing():Boolean{			return _playing;		}				public function set volume(nv:Number):void{			_volume = nv;		}	}}