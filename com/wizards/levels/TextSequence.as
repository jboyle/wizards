package com.wizards.levels{	import com.wizards.WizardsG;	import com.wizards.WizardsU;		import fl.transitions.easing.*;	import fl.transitions.Tween;		import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	import flash.text.TextField;	import flash.text.TextFormat;		public class TextSequence extends View	{		protected var _messages:Array;		protected var _stepper:int;				private var _tweens:Array;				protected var _waitTimer:Number;		protected var _waitTime:Number;		public function TextSequence(text:String, targetRoom:String, targetDirection:uint)		{			_messages = new Array();			_tweens = new Array();			var messageStrings:Array = text.split("\n");						_targetRoom = targetRoom;			_targetDirection = targetDirection;						WizardsU.drawRect(new Rectangle(0,0,800,600),0x000000,this);						var format:TextFormat = new TextFormat();			format.font = "Arial";			format.size = 36;						var yIndex = 40;			var xIndex = 40;						for(var i = 0; i < messageStrings.length; i++){				var t:TextField = new TextField();								t.text = messageStrings[i];				t.setTextFormat(format);				t.textColor = 0xffffff;				t.x = xIndex;				t.y = yIndex;				t.width = 760;				t.alpha = 0;				this.addChild(t);				_messages.push(t);				yIndex += 80;			}						super();						_turnLeftArea.visible = false;			_turnRightArea.visible = false;						_stepper = 0;			_waitTimer = 0;			_waitTime = 3;						//_tweens.push(new Tween(_messages[0],"alpha",Regular.easeIn,0,1,.5,true));						this.addEventListener(MouseEvent.CLICK,handleClick);		}				override public function update():void{			if(_stepper <= _messages.length){				_waitTimer += WizardsG.TIME_DIFF;				if(_waitTimer > _waitTime){					showNextMessage();				}			}									super.update();		}				protected function showNextMessage():void{			_waitTimer = 0;			if(_stepper < _messages.length){				var text = _messages[_stepper];				_tweens.push(new Tween(text,"alpha",Regular.easeIn,0,1,.5,true));			} else {				_fader.addEventListener(Event.COMPLETE, handleFadeComplete);				fadeOut(1);			}			_stepper++;		}				protected function handleClick(ev:MouseEvent){			showNextMessage();		}				protected function handleFadeComplete(ev:Event){			//trace("received completeEvent");			dispatchTargetRoomEvent();		}				protected function dispatchTargetRoomEvent(){			var ev:LevelEvent = new LevelEvent(LevelEvent.CHANGE_ROOM);			ev.room = _targetRoom;			ev.direction = _targetDirection;			ev.fadeIn = true;			//trace("targetRoom: "+_targetRoom);			dispatchEvent(ev);		}			}}